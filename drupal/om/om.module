<?php

//Implement hook_entity_info().

function om_entity_info() {
  // no new info here
  // just a placeholder
  $return = array();  
  return $return;
}

function om_readDelimitedFile($filename,$delimiter=',', $headerline=0, $numlines = -1) {
   # $headerline = 1 indicates that the first line contains column names,
   #                 if this is the case, we create an associative array to return
   
   if ($headerline) {
      $outarr = om_buildStock($filename, $delimiter);
      return $outarr;
   }
   $fp = fopen($filename,"r");
   $maxlinewidth = 8192;
   $thisarr = array();
   $outarr = array();
   
   if ($numlines == -1) {

      while($thisarr = fgetcsv($fp,$maxlinewidth, $delimiter)) {
         array_push($outarr,$thisarr);
      }
   } else {
      $numread = 1;
      while( ($thisarr = fgetcsv($fp,$maxlinewidth, $delimiter)) and ($numread <= $numlines)) {
         array_push($outarr,$thisarr);
         $numread++;
      }
   }
   fclose($fp);
   return $outarr;
}

function om_tablefield_tablefield($field) {
  $tablefield = isset($field['und'][0]['tablefield']) ? $tablefield['und'][0]['tablefield'] : $tablefield['und'][0]['tabledata'];
  return $tablefield;
}

function om_buildStock($filename, $delimiter=',', $debug = 0) {
   $handle = fopen($filename, "r");
   $fields = fgetcsv($handle, 0, "$delimiter");
   while($data = fgetcsv($handle, 0, "$delimiter")) {
      $detail[] = $data;
   }
   $x = 0;
   $y = 0;
   $stock = array();
   if (count($detail) > 0) {
      foreach($detail as $i) {
         foreach($fields as $z) {
             $stock[$x][$z] = $i[$y];
             if ($debug) {
                $val = $i[$y];
                error_log("setting [ $x ] [ $z ] = $val ($i [ $y ]) \n");
             }
             $y++;
         }
         $y = 0;
         $x++;
      }
   }
   fclose($handle);
   return $stock;
}

function om_run_id_options() {
  global $user;
  $options = array();
  if (in_array('administrator', $user->roles)) {
    $options += array(
      '0' => t('Pre-Condition (#0)'),
      '1' => t('Historical Conditions (#1)'),
      '2' => t('Current Conditions (#2)'),
      '3' => t('Permit Term Maximum (#3)'),
      '4' => t('Safe Yield (All at Max) (#4)'),
      '5' => t('Custom Admin Run (#5)'),
      '6' => t('Custom Admin Run (#6)'),
      '7' => t('Custom Admin Run (#7)'),
      '8' => t('Custom Admin Run (#8)'),
      '9' => t('Custom Admin Run (#9)'),
      '10' => t('Custom Admin Run (#10)'),
      '11' => t('2020 SWRP Current 2018 (#11)'),
      '12' => t('2020 SWRP Future 2040 (#12)'),
      '21' => t('2015 SWRP Current 2010 (#21)'),
      '22' => t('2015 SWRP Future 2040 (#22)'),
    );
  }
  for ($i = 100; $i <= 1000; $i++) {
    $options[$i] = "Custom User Run #$i";
  }
  error_log("runid options " . print_r($options,1));
  return $options;
}

function om_run_mode_options() {
  global $user;
  $options = array();
  $options += array(
    '0' => t('Baseline Hydrology (#0)'),
    '1' => t('Historical Conditions (#1)'),
    '2' => t('Current Conditions (#2)'),
    '3' => t('Permit Term Maximum (#3)'),
    '4' => t('Safe Yield (All at Max) (#4)'),
    '5' => t('Custom Admin Run (#5)'),
    '6' => t('Custom Admin Run (#6)'),
    '7' => t('Custom Admin Run (#7)'),
    '8' => t('Custom Admin Run (#8)'),
    '9' => t('Custom Admin Run (#9)'),
    '10' => t('Current/2020 Demand in 2020 SWRP'),
    '11' => t('Future 2030 Demand in 2020 SWRP'),
    '12' => t('Future 2040 Demand in 2020 SWRP'),
    '13' => t('Current/2020 Demand 2020 SWRP with 2050 CC run #1'),
    '14' => t('Current/2020 Demand 2020 SWRP with 2050 CC run #2'),
    '15' => t('Current/2020 Demand 2020 SWRP with 2050 CC run #3'),
    '16' => t('Future 2040 Demand in 2020 SWRP with Driest 2050 CC'),
    '17' => t('TBD'),
    '18' => t('TBD'),
    '19' => t('TBD'),
    '20' => t('TBD'),
    '21' => t('2015 SWRP Current 2010 (#21)'),
    '22' => t('2015 SWRP Future 2040 (#22)'),
  );
  return $options;
}

function om_flow_mode_options() {
  global $user;
  $options = array();
  $options += array(
    '0' => t('Best Available (seldom used) (#0)'),
    '1' => t('Baseline USGS { Q + wd - ps }(seldom used) (#1)'),
    '2' => t('USGS Paired, Synthetic Hydrograph (seldom used) (#2)'),
    '3' => t('VAHydro 1.0/CBP5.3 (#3)'),
    '4' => t('CBP Phase 6 (#4)'),
    '5' => t('CBP Phase 6 (#5)'),
  );
  return $options;
}

// Generic function to get or set property.  Need to migrate to dh at some time.
function om_model_getSetProperty($values, $singularity = 'name', $save = TRUE) {
  $om_model = dh_properties_enforce_singularity($values, $singularity);
  if (!is_object($om_model)) {
    if (isset($values['propvalue_default'])) {
      $values['propvalue'] = $values['propvalue_default'];
    }
    if (isset($values['propcode_default'])) {
      $values['propcode'] = $values['propcode_default'];
    }
    // create a model element
    //error_log("$values[varkey] does not exist...creating");
    $om_model = entity_create('dh_properties', $values);
    if ($save) {
      $om_model->save();
    }
    //error_log("Created $om_model->propname");
  } else {
    //error_log("Found $om_model->propname");
  }
  return $om_model;
}

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *   none
 * Instance settings:
 *   - default_object_class: whether text input filters should be used.

function om_field_info() {
  return array(
    'om_config' => array(
      'label' => t('Object Model Config'),
      'description' => t('This field stores configuration options in the database.'),
      'instance_settings' => array('default_object_class' => 'blankShell'),
      'default_widget' => 'om_default_widget,
      'default_formatter' => 'om_default_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function om_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // @todo Length is counted separately for summary and value, so the maximum
    //   length can be exceeded very easily.
    if (isset($item['object_class'])) {
      // instantiate the object class first
    }
    if (isset($item['config'])) {
      // pass this to the class validation method
      // since $errors is passed as &$errors
      // we can just let the object_class handle it
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function om_field_is_empty($item, $field) {
  // this can be handled by the object class
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 *
 * This should be handled by plugins, 
 * the default is to just show model component info to admin,
 * hidden from others
 */
function om_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'om_default_formatter' => array(
      'label' => t('Simple info formatter - viewable by admin'),
      'field types' => array('om_config'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * This should be handled by plugins, 
 * the default is to just show model component info to admin,
 * hidden from others
 *
 */
function om_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'om_default_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => 'object_class: ' . $item['object_class'],
        );
      }
    break;
  }

  return $element;
}


/**
 * Implements hook_field_widget_info().
 *
 */
function om_field_widget_info() {
  return array(
    'om_default_widget' => array(
      'label' => t('OM Shell Object'),
      'field types' => array('om_config'),
    ),
  );
}


/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_example_colorpicker' and 'field_example_text' are essentially
 * the same, but field_example_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_example_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function om_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['config']) ? $items[$delta]['config'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'om_widget_default':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
        '#size' => 7,
        '#maxlength' => 7,
      );
      break;

  }

  $element['config'] = $widget;
  return $element;
}

function om_element_validate_alpha_string($element, &$form_state) {
  $value = $element['#value'];
  if(preg_match('/[^a-z_\-0-9]/i', $value)) {
    form_error($element, t('%name must be an contain only letters, underscores, hyphens and numbers.', array('%name' => $element['#title'])));
  }
}
// ***********************************************************
// ***            Object Declarations                      ***
// no declarations here, all classes handled as CTools plugins
// ***********************************************************

/**
 * Implements hook_ctools_plugin_directory().
 */
function om_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
  // expose the primitive OM components from this base modules plugin dir
  if ($owner == 'om' && $plugin_type == 'om_components') {
    return 'plugins/' . $plugin_type;
  }
  
  // entity reference plugin
  if ($owner == 'entityreference') {
    return "plugins/$owner/" . $plugin_type;
  }
  
  if ($owner == 'dh' && $plugin_type == 'dh_variables') {
    return 'plugins/' . $plugin_type;
  }
}

function om_ctools_plugin_type() {
  return array(
    'om_components' => array(
      'classes' => array('handler'),
    ),
  );
}
