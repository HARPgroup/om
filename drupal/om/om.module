<?php

//Implement hook_entity_info().

function om_entity_info() {
  // no new info here
  // just a placeholder
  $return = array();  
  return $return;
}

function om_readDelimitedFile($filename,$delimiter=',', $headerline=0, $numlines = -1) {
   # $headerline = 1 indicates that the first line contains column names,
   #                 if this is the case, we create an associative array to return
   
   if ($headerline) {
      $outarr = om_buildStock($filename, $delimiter);
      return $outarr;
   }
   $fp = fopen($filename,"r");
   $maxlinewidth = 8192;
   $thisarr = array();
   $outarr = array();
   
   if ($numlines == -1) {

      while($thisarr = fgetcsv($fp,$maxlinewidth, $delimiter)) {
         array_push($outarr,$thisarr);
      }
   } else {
      $numread = 1;
      while( ($thisarr = fgetcsv($fp,$maxlinewidth, $delimiter)) and ($numread <= $numlines)) {
         array_push($outarr,$thisarr);
         $numread++;
      }
   }
   fclose($fp);
   return $outarr;
}

function om_tablefield_tablefield($field) {
  // unpack the hinky-ass 
  $tablefield = isset($field['und'][0]['tablefield']) ? $field['und'][0]['tablefield'] : $field['und'][0]['tabledata'];
  return $tablefield;
}

function om_buildStock($filename, $delimiter=',', $debug = 0) {
   $handle = fopen($filename, "r");
   $fields = fgetcsv($handle, 0, "$delimiter");
   while($data = fgetcsv($handle, 0, "$delimiter")) {
      $detail[] = $data;
   }
   $x = 0;
   $y = 0;
   $stock = array();
   if (count($detail) > 0) {
      foreach($detail as $i) {
         foreach($fields as $z) {
             $stock[$x][$z] = $i[$y];
             if ($debug) {
                $val = $i[$y];
                error_log("setting [ $x ] [ $z ] = $val ($i [ $y ]) \n");
             }
             $y++;
         }
         $y = 0;
         $x++;
      }
   }
   fclose($handle);
   return $stock;
}

function om_run_id_options() {
  global $user;
  $options = array();
  if (in_array('administrator', $user->roles)
    or in_array('analyst', $user->roles)
  ) {
    $options += array(
      'Current Conditions + Current(run_mode = 4)' => array(
        '2' => t('Current Conditions (#2)'),
        '200' => t('Current Conditions, full time period (#200)'),
        '201' => t('Current Conditions, 1998-2002 (#201)'),
        '2011' => t('Current Conditions, 1998-2002, alt. 1 (#2011)'),
        '2012' => t('Current Conditions, 1998-2002, alt. 2 (#2012)'),
      ),
      'Permit Term Max + Current(run_mode = 4)' => array(
        '4' => t('Permit Term Max + Current (#4)'),
        '400' => t('Draft Permit Term Max + Current, full time period (#400)'),
        '401' => t('Draft Permit Term Max + Current, 1998-2002 (#401)'),
        '4011' => t('Draft Permit Term Max + Current, 1998-2002, alt. 1 (#4011)'),
        '4012' => t('Draft Permit Term Max + Current, 1998-2002, alt. 2 (#4012)'),
      ),
      'Permit Term Max + Proposed Runs (run_mode = 6)' => array(
        '6' => t('Permit Term Max w/Proposed (#6)'),
        '600' => t('Draft Permit Term Max w/Proposed, full time period (#600)'),
        '601' => t('Draft Permit Term Max w/Proposed - 1998-2002 (#601)'),
        '6011' => t('Draft Permit Term Max w/Proposed - 1998-2002, alt. 1 (#6011)'),
        '6012' => t('Draft Permit Term Max w/Proposed - 1998-2002, alt. 2 (#6012)'),
        '6013' => t('Draft Permit Term Max w/Proposed - 1998-2002, alt. 3 (#6013)'),
        '6014' => t('Draft Permit Term Max w/Proposed - 1998-2002, alt. 4 (#6014)'),
        '6015' => t('Draft Permit Term Max w/Proposed - 1998-2002, alt. 5 (#6015)'),
      ),
      'Full Runs' => array(
        '0' => t('Pre-Condition (#0)'),
        '1' => t('Historical Conditions (#1)'),
        '3' => t('Permit Term Max (#3)'),
        '5' => t('tbd: Custom Admin Run (#5)'),
        '7' => t('tbd: (#7)'),
        '8' => t('tbd: (#8)'),
        '9' => t('Custom Admin Run (#9)'),
        '10' => t('Custom Admin Run (#10)'),
        '11' => t('2020 Demand 2020 (#11)'),
        '12' => t('2020 Demand 2030 (#12)'),
        '13' => t('2020 Demand 2040 (#13)'),
        '14' => t('2020 Demand 2020, 2055 CC-1, 50/50 (#14)'),
        '15' => t('2020 Demand 2020, 2055 CC-2, 10/10 (#15)'),
        '16' => t('2020 Demand 2020, 2055 CC-3, 90/90 (#16)'),
        '17' => t('2040 Demand 2040, 2055 CC-2 10/10 (#17)'),
        '18' => t('2020 Exempt User Runs (#18)'),
        '19' => t('2020 Demand 2040, 2055 CC-1, 50/50 (#19)'),
        '20' => t('2020 Demand 2040, 2055 CC-3, 90/90 (#20)'),
        '21' => t('2015 Demand 2010 (#21)'),
        '22' => t('2015 Demand 2040 (#22)'),
      ),
      'Draft Full Runs' => array(
        '300' => t('Draft Permit Term Max, full time period (#300)'),
      ),
      'Draft 3-5 Year Runs' => array(
        '301' => t('Draft Permit Term Max w/Prop + Exempt Max, 2000-2002 (#301)'),
      ),
      '3-Hour Timestep, Short Runs' => array(
        '1153' => t('2020 Demand 2020, 3-hour, 1998-2002 (#1153)'),
        '1253' => t('2020 Demand 2030, 3-hour, 1998-2002 (#1253)'),
        '1353' => t('2020 Demand 2020, 3-hour, 1998-2002 (#1353)'),
        '1753' => t('2020 Demand 2020, 3-hour, 1998-2002 (#1753)'),
        '1853' => t('2020 Demand 2020, 3-hour, 1998-2002 (#1853)'),
      ),
      '3-Hour Timestep, Full Runs' => array(
        '1163' => t('2020 Demand 2020, 3-hour, full time period (#1163)'),
        '1263' => t('2020 Demand 2030, 3-hour, full time period (#1263)'),
        '1363' => t('2020 Demand 2040, 3-hour, full time period (#1363)'),
        '1763' => t('2020 Demand 2020, 3-hour, full time period (#1763)'),
        '1863' => t('2020 Exempt User Runs, 3-hour, full time period (#1863)'),
      ),
      '1-Hour Timestep Runs' => array(
        '231' => t('Draft Current Conditions, hourly, 2000-2002 (#231)'),
        '1131' => t('2020 Current 2020, hourly, 1998-2002 (#1131)'),
        '1141' => t('2020 Current 2020, hourly, full time period (#1141)'),
      ),
      '4-Hour Timestep Runs' => array(
        '1152' => t('2020 Current 2020, 4-hour, 1998-2002 (#1152)'),
        '1162' => t('2020 Current 2020, 4-hour, full time period (#1162)'),
      ),
      '6-Hour Timestep Runs' => array(
        '1151' => t('2020 Current 2020, 6-hour, 1998-2002 (#1151)'),
        '1161' => t('2020 Current 2020, 6-hour, full time period (#1161)'),
      ),
    );
  }
  $allkeys = array();
  foreach($options as $ogroup => $oopts) {
    foreach ($oopts as $key => $val) {
      $allkeys[$key] = $val;
    }
  }
  //dpm($allkeys);
  for ($i = 100; $i <= 2000; $i++) {
    if (!isset($allkeys[$i])) {
      $options['Custom Runs'][$i] = "Custom User Run #$i";
    }
  }
  //error_log("runid options " . print_r($options,1));
  return $options;
}

function om_run_mode_options() {
  global $user;
  $options = array();
  $options += array(
    '0' => t('Baseline Hydrology (#0)'),
    '1' => t('Historical Conditions (#1)'),
    '2' => t('Current Conditions (#2)'),
    '3' => t('Permit Max + Proposed + Exempt (#3)'),
    '4' => t('Permit Term Max + Current (#4)'),
    '5' => t('Custom Admin Run (#5)'),
    '6' => t('Permit Dev: Permit Max + Proposed + Current (#6)'),
    '7' => t('Custom Admin Run (#7)'),
    '8' => t('Custom Admin Run (#8)'),
    '9' => t('VWP Exempt (#9)'),
    '10' => t('2020 Demand'),
    '11' => t('2030 Demand'),
    '12' => t('2040 Demand'),
    '13' => t('TBD'),
    '14' => t('TBD'),
    '15' => t('TBD'),
    '16' => t('TBD'),
    '17' => t('TBD'),
    '18' => t('TBD'),
    '19' => t('TBD'),
    '20' => t('TBD'),
    '21' => t('2015 Current 2010 (#21)'),
    '22' => t('2015 Future 2040 (#22)'),
  );
  return $options;
}

function om_flow_mode_options() {
  global $user;
  $options = array();
  $options += array(
    '0' => t('Best Available (seldom used) (#0)'),
    '1' => t('Baseline USGS { Q + wd - ps }(seldom used) (#1)'),
    '2' => t('USGS Paired, Synthetic Hydrograph (seldom used) (#2)'),
    '3' => t('VAHydro 1.0/CBP5.3 (#3)'),
    '4' => t('CBP Phase 6 (#4)'),
    '5' => t('CBP Phase 6 CC1, 50/50(#5)'),
    '6' => t('CBP Phase 6 CC2, 10/10(#6)'),
    '7' => t('CBP Phase 6 CC3, 90/90(#7)'),
  );
  return $options;
}

// Generic function to get or set property.  Need to migrate to dh at some time.
function om_model_getSetProperty($values, $singularity = 'name', $save = TRUE) {
  $om_model = dh_properties_enforce_singularity($values, $singularity);
  if (!is_object($om_model)) {
    if (isset($values['propvalue_default'])) {
      $values['propvalue'] = $values['propvalue_default'];
    }
    if (isset($values['propcode_default'])) {
      $values['propcode'] = $values['propcode_default'];
    }
    // create a model element
    //error_log("$values[varkey] does not exist...creating");
    $om_model = entity_create('dh_properties', $values);
    if ($save) {
      $om_model->save();
    }
    //error_log("Created $om_model->propname");
  } else {
    //error_log("Found $om_model->propname");
  }
  return $om_model;
}

function om_load_dh_property($entity, $model_name) {

  $model_entity_type = $entity->entityType();
  $fid = $entity->identifier();
  $values = array(
    'entity_type' => $model_entity_type,
    'featureid' => $fid,
    'propname' => $model_name,
  );
  $model = om_get_property($values);
  return $model;
}

function om_get_property($values, $singularity = 'name') {
  $pids = dh_get_properties($values, $singularity);
  //error_log("Pids:" . print_r((array)$pids, 1)); 
  $om_model = FALSE;
  if (count($pids) > 0) {
    $pid = array_shift($pids['dh_properties']);
    $om_model = entity_load_single('dh_properties', $pid->pid);
  }
  return $om_model;
}

function om_copy_properties($src_entity, $dest_entity, $propname, $fields = TRUE, $defprops = FALSE, $allprops = FALSE) {
  list($propname,$newname) = explode("|",$propname);
  $newname = empty($newname) ? $propname : $newname;
  $src_prop = om_load_dh_property($src_entity, $propname);
  $values = array(
    'entity_type' => $dest_entity->entityType(),
    'propname' => $newname,
    'featureid' => $dest_entity->identifier(),
    'varid' => $src_prop->varid,
    'bundle' => $src_prop->bundle,
  );
  if (!is_object($src_prop)) {
    watchdog('om', "Property $propname  does not exist on source entity of type " . get_class($src_entity));
    return FALSE;
  }
  $info = $src_prop->entityInfo();
  $copyable = array_unique(array_merge(array('varid', 'bundle'), array_values($info['property info'])));
  //error_log("Copyable " . print_r($copyable,1));
  foreach ($copyable as $pname) {
    if (isset($src_prop->{$pname})) {
      if ($pname <> 'propname') {
        $values[$pname] = $src_prop->{$pname};
      }
    }
  }
  // add or replace new property with copy values 
  //error_log("values " . print_r($values,1));
  $copy = om_model_getSetProperty($values, 'name', FALSE);
  // Now copy fields
  if ($fields) {
    $propfields = field_info_instances($src_prop->entityType(), $src_prop->bundle);
    // @todo: handle entity reference fields, changing the destid 
    //    handle om link fields map_model_linkage and om_element_connection
    foreach (array_keys($propfields) as $fieldname) {
      if (isset($src_prop->{$fieldname})) {
        $copy->{$fieldname} = $src_prop->{$fieldname};
      }
    }
  }
  $plugin = dh_variables_getPlugins($copy);
  if (get_class($plugin) == 'dHOMElementConnect') {
    $copy->propcode = 0;
    $copy->save();
  }
  $copy->save();
  //entity_save('dh_properties', $copy);
  // @todo: handle allprops if requested
  if ($allprops) {
    // nothing yet - need to exclude om_element_connection properties, or at least nullify settings to prevent redundant updates.
    $propnames = dh_get_dh_propnames($src_prop->entityType(), $src_prop->identifier());
    //dpm($propnames, "Propnames ");
    foreach ($propnames as $subpropname) {
      $sub_copy = om_copy_properties($src_prop, $copy, $subpropname, TRUE, TRUE, TRUE);
      //dpm($copy,'copy');
    }
  }
  // Copy default properties defined in getDefaults()?
  if ($defprops) {
    $default_subprops = array();
    $plugin = dh_variables_getPlugins($src_prop);
    if (is_object($plugin ) and method_exists($plugin, 'getDefaults')) {
      $default_subprops = $plugin->getDefaults($src_prop);
    }
    //error_log("Found def props: " . print_r($default_subprops,1));
    foreach ($default_subprops as $thisprop) {
      //error_log("Copying $thisprop[propname] from $src_prop->pid to $copy->pid");
      $sub = om_copy_properties($src_prop, $copy, $thisprop['propname'], $fields, $defprops, $allprops);
      $copy->{$thisprop['propname']} = $sub;
    }
  }
  $copy->save();
  error_log("Made copy of $propname as $newname with pid = " . $copy->pid . " and featureid = " . $copy->featureid . " propcode = $copy->propcode, propvalue=$copy->propvalue");
  // die on match
  //if ($copy->propname == 'keycol1') {
  //  die;  
  //}
  return $copy;
}

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *   none
 * Instance settings:
 *   - default_object_class: whether text input filters should be used.

function om_field_info() {
  return array(
    'om_config' => array(
      'label' => t('Object Model Config'),
      'description' => t('This field stores configuration options in the database.'),
      'instance_settings' => array('default_object_class' => 'blankShell'),
      'default_widget' => 'om_default_widget,
      'default_formatter' => 'om_default_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function om_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // @todo Length is counted separately for summary and value, so the maximum
    //   length can be exceeded very easily.
    if (isset($item['object_class'])) {
      // instantiate the object class first
    }
    if (isset($item['config'])) {
      // pass this to the class validation method
      // since $errors is passed as &$errors
      // we can just let the object_class handle it
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function om_field_is_empty($item, $field) {
  // this can be handled by the object class
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 *
 * This should be handled by plugins, 
 * the default is to just show model component info to admin,
 * hidden from others
 */
function om_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'om_default_formatter' => array(
      'label' => t('Simple info formatter - viewable by admin'),
      'field types' => array('om_config'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * This should be handled by plugins, 
 * the default is to just show model component info to admin,
 * hidden from others
 *
 */
function om_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'om_default_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => 'object_class: ' . $item['object_class'],
        );
      }
    break;
  }

  return $element;
}


/**
 * Implements hook_field_widget_info().
 *
 */
function om_field_widget_info() {
  return array(
    'om_default_widget' => array(
      'label' => t('OM Shell Object'),
      'field types' => array('om_config'),
    ),
  );
}

function om_find_parent_feature($prop) {
  // just keep going till you find a feature then return 
  $plugin = dh_variables_getPlugins($prop);
  $parent = $plugin->getParentEntity($prop);
  while ($parent->entityType() <> 'dh_feature') {
    $parent = om_find_parent_feature($parent);
  }
  return $parent;
}

function om_get_model_tree($model, &$tree = array(), $scenario = NULL, $children = TRUE, $remote = TRUE, $linked = TRUE, $spatial = TRUE, $upstream = TRUE) {
  // retrieve based on specified connectivity. Default is to pull everything upstream and remotely pulled in.
  // $scenario defaults to object propcode value if null
  // get Upstream via upstream dh_nextdown_id 
  // this involves finding the topmost feature for this entity 
  // this only works for the $controller object, since we restrict for tree having 1 element
  $tree[$model->pid] = $model;
  $plugin = dh_variables_getPlugins($model);
  if ( (count($tree) == 1) and $upstream) {
    // find parent feature 
    $feature = om_find_parent_feature($model);
    $feature_tree = dh_hydro_findTribs($feature->hydroid);
    // search these for models, and add them, including spatial 
  }
  dpm($feature_tree);
  // get parent feature if $spatial or $upstream is true 
  if ($spatial) {
    // get features that are contained
    // add to list of features 
    
  }
  // get OM child-parent linkages
  if ($children) {
    // direct links (link_type = 1)
    // this should use a method attached to the plugin getChildren() 
    
  }
  // get OM input linkages
  if ($linked) {
    // direct links (link_type = 2)
    // this should use a method attached to the plugin getChildren() 
    
  }
  // get OM remote linkages
  if ($remote) {
    // direct links (link_type = 3)
    // this should use a method attached to the plugin getChildren() 
    
  }
  
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_example_colorpicker' and 'field_example_text' are essentially
 * the same, but field_example_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_example_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function om_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['config']) ? $items[$delta]['config'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'om_widget_default':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
        '#size' => 7,
        '#maxlength' => 7,
      );
      break;

  }

  $element['config'] = $widget;
  return $element;
}

function om_element_validate_alpha_string($element, &$form_state) {
  $value = $element['#value'];
  if(preg_match('/[^a-z_\-0-9]/i', $value)) {
    form_error($element, t('%name must be an contain only letters, underscores, hyphens and numbers.', array('%name' => $element['#title'])));
  }
}

function om_token_replace_all(&$replacements, $data, $options) {
  $replacements = $data;
}

function om_tokenize($base, $indata, &$outdata, $delim = ':', $allowed = array(), $enc = array('[', ']')) {
  if (!is_array($indata)) {
    return $indata;
  }
  foreach ($indata as $key => $value) {
    $newbase = empty($base) ? $key : $base . $delim . $key;
    if (is_array($value) ) {
      $toke = om_tokenize($newbase, $value, $outdata, $delim, $allowed);
    } else {
      // we reached the end
      if (!empty($allowed )) {
        // we only allow some specific ending props
        if (in_array($key, $allowed )) {
          $outdata[$enc[0] . "$newbase" . $enc[1]] = $value;
        }
      } else {
        $outdata[$enc[0] . "$newbase" . $enc[1]] = $value;
      }
    }
  }
}
// ***********************************************************
// ***            Object Declarations                      ***
// no declarations here, all classes handled as CTools plugins
// ***********************************************************



/**
  * Implements hook_views_api().
  */
function om_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'om') . '/views',
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function om_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
  // expose the primitive OM components from this base modules plugin dir
  if ($owner == 'om' && $plugin_type == 'om_components') {
    return 'plugins/' . $plugin_type;
  }
  
  // entity reference plugin
  if ($owner == 'entityreference') {
    return "plugins/$owner/" . $plugin_type;
  }
  
  if ($owner == 'dh' && $plugin_type == 'dh_variables') {
    return 'plugins/' . $plugin_type;
  }
}

function om_ctools_plugin_type() {
  return array(
    'om_components' => array(
      'classes' => array('handler'),
    ),
  );
}

/************************************************
 *
 * Functions To Be Ported to dH Module
 *
 ************************************************
*/


function dh_get_dh_propnames($entity_type, $entity_id) {
  if (!($entity_id > 0)) {
    return FALSE;
  }
  $q = "  select propname from {dh_properties} ";
  $q .= " where featureid = :entity_id and entity_type = :entity_type";
  $result = db_query($q, array(':entity_id' => $entity_id, ':entity_type' => $entity_type));
  $props = $result->fetchCol();
  return $props;
}

/************************************************
 *
 * Functions To Interact with Native OM App
 *
 ************************************************
*/
global $om, $php_path;
$om = 'http://deq2.bse.vt.edu/om/get_model.php';
$php_path = "/var/www/html/om/";

function om_setprop($elementid, $propname, $propval) {
  global $php_path;
  $cmd = "cd $php_path \n";
  $cmd .= "php setprop.php $elementid $propname=\"$propval\"";
  //dpm( $php_path, "Exec Path ");
  //dpm( $cmd, "Executing ");
  error_log("$cmd");
  $elid = shell_exec($cmd);
  return $elid;
}

function om_get_model_status($elementid, $mins = 120, $format = '') {
  // use format = 'list' to see the raw liostobject (default for no elementid)
  $path = "/var/www/html/om/"; // @todo: put this in the module settings somewhere
  $cmd = "cd $path \n";
  $cmd .= "php get_modelStatus.php $elementid $mins $format";
  //$cmd .= "php get_modelStatus.php $elementid $mins ";
  $json = shell_exec($cmd);
  //error_log("JSON $json");
  $status = json_decode($json, TRUE);
  //error_log("json_decode" . print_r($status,1));
  //dpm($status,'json decoded');
  return $status;
}

function om_message_model($elementid, $host, $msg, $run_id) {
  $path = "/var/www/html/om/"; // @todo: put this in the module settings somewhere
  $cmd = "cd $path \n";
  $cmd .= "php fn_message_model.php $elementid $host $msg $run_id ";
  drupal_set_message($cmd);
  $result = shell_exec($cmd);
  return $result;
}

function om_summarize_model($elementid, $run_id) {
  $path = "/var/www/html/om/"; // @todo: put this in the module settings somewhere
  $cmd = "cd $path \n";
  $cmd .= "php fn_summarize_model_manifest.php $elementid $run_id ";
  $result = shell_exec($cmd);
  return $result;
}