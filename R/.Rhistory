as.character(format(dor_date,'%Y-%m')),
")",
sep=''
),
sep="/"
),
"WD (mean/max)" = paste(as.character(mean_wd),as.character(max_wd),sep="/")
);
wshed_summary_tbl <- rbind(wshed_summary_tbl, newline);
barplot(aggregate(wds, format(time(wds), "%m"), mean));
colnames(wshed_summary_tbl) <- c("Segment Name (D. Area)", "7Q10/ALF/Min Month", "WD (mean/max)" );
pander(wshed_summary_tbl, table.split.table=Inf);
wshed_summary_tbl = data.frame(
"Run ID" = character(),
"Segment Name (D. Area)" = character(),
"7Q10/ALF/Min Month" = character(),
"WD (mean/max)" = character(),
stringsAsFactors = FALSE) ;
inputs <- list(
varkey = "om_element_connection",
featureid = odata[1,"hydroid"],
entity_type = "dh_feature"
)
newline = data.frame(
"Run ID" = runid,
"Segment Name" = paste(
as.character(odata[i,]$name ),
" (", as.character(drainage), ")", sep=""),
"7Q10/ALF/Min Month" = paste(
as.character(x7q10),
as.character(alf),
paste(
as.character(dor_flow),
" (",
as.character(format(dor_date,'%Y-%m')),
")",
sep=''
),
sep="/"
),
"WD (mean/max)" = paste(as.character(mean_wd),as.character(max_wd),sep="/")
);
wshed_summary_tbl <- rbind(wshed_summary_tbl, newline);
barplot(aggregate(wds, format(time(wds), "%m"), mean));
colnames(wshed_summary_tbl) <- c(
"Run ID",
"Segment Name (D. Area)",
"7Q10/ALF/Min Month",
"WD (mean/max)"
);
pander(wshed_summary_tbl, table.split.table=Inf);
runids = c(2,94);
for (rix in length(runids)) {
runid = runids[rix];
# Pamunkey below fall line = 223639
# Rockfish 213049
# Rivanna at Confluence with james = 214993
# Segment name | Drainage Area | 7Q10 | ALF | DoR Sept (min mo?) | 9-10
# Initialize Summary Table
wshed_summary_tbl = data.frame(
"Run ID" = character(),
"Segment Name (D. Area)" = character(),
"7Q10/ALF/Min Month" = character(),
"WD (mean/max)" = character(),
stringsAsFactors = FALSE) ;
inputs <- list(
varkey = "om_element_connection",
featureid = odata[1,"hydroid"],
entity_type = "dh_feature"
)
prop <- getProperty(inputs, base_url, prop)
elid = as.numeric(as.character(prop[1,]$propvalue))
flows <- fn_get_rundata(elid, runid);
if (flows) {
x7q10 = round(fn_iha_7q10(flows),2);
alf = round(fn_iha_mlf(flows, 8),2);
} else {
x7q10 = 'na';
alf = 'na';
}
wds <- fn_get_rundata(elid, runid, "wd_cumulative_mgd");
if (is.numeric(wds)) {
mean_wd = round(mean(wds),2);
max_wd = round(max(wds),2);
} else {
mean_wd = 'na';
max_wd = 'na';
}
# aggregate: https://stackoverflow.com/questions/5556135/how-to-get-the-date-of-maximum-values-of-rainfall-in-programming-language-r
if (flows) {
moflows <- aggregate(flows, function(tt) as.Date(as.yearmon(tt)), mean);
ndx = which.min(moflows);
dor_flow = round(moflows[ndx],2);
dor_date = index(moflows[ndx]);
} else {
dor_flow = 'na';
dor_date = as.Date('1776-07-04');
}
d <- try( as.Date( dor_date, format= "%d-%m-%Y %H:%M:%S" ) )
if( class( d ) == "try-error" || is.na( d ) ) dor_date = as.Date('1776-07-04');
newline = data.frame(
"Run ID" = runid,
"Segment Name" = paste(
as.character(odata[i,]$name ),
" (", as.character(drainage), ")", sep=""),
"7Q10/ALF/Min Month" = paste(
as.character(x7q10),
as.character(alf),
paste(
as.character(dor_flow),
" (",
as.character(format(dor_date,'%Y-%m')),
")",
sep=''
),
sep="/"
),
"WD (mean/max)" = paste(as.character(mean_wd),as.character(max_wd),sep="/")
);
wshed_summary_tbl <- rbind(wshed_summary_tbl, newline);
barplot(aggregate(wds, format(time(wds), "%m"), mean));
}
runids
rix
colnames(wshed_summary_tbl) <- c(
"Run ID",
"Segment Name (D. Area)",
"7Q10/ALF/Min Month",
"WD (mean/max)"
);
pander(wshed_summary_tbl, table.split.table=Inf);
for (rix in 1:length(runids)) {
runid = runids[rix];
# Pamunkey below fall line = 223639
# Rockfish 213049
# Rivanna at Confluence with james = 214993
# Segment name | Drainage Area | 7Q10 | ALF | DoR Sept (min mo?) | 9-10
# Initialize Summary Table
wshed_summary_tbl = data.frame(
"Run ID" = character(),
"Segment Name (D. Area)" = character(),
"7Q10/ALF/Min Month" = character(),
"WD (mean/max)" = character(),
stringsAsFactors = FALSE) ;
inputs <- list(
varkey = "om_element_connection",
featureid = odata[1,"hydroid"],
entity_type = "dh_feature"
)
prop <- getProperty(inputs, base_url, prop)
elid = as.numeric(as.character(prop[1,]$propvalue))
flows <- fn_get_rundata(elid, runid);
if (flows) {
x7q10 = round(fn_iha_7q10(flows),2);
alf = round(fn_iha_mlf(flows, 8),2);
} else {
x7q10 = 'na';
alf = 'na';
}
wds <- fn_get_rundata(elid, runid, "wd_cumulative_mgd");
if (is.numeric(wds)) {
mean_wd = round(mean(wds),2);
max_wd = round(max(wds),2);
} else {
mean_wd = 'na';
max_wd = 'na';
}
# aggregate: https://stackoverflow.com/questions/5556135/how-to-get-the-date-of-maximum-values-of-rainfall-in-programming-language-r
if (flows) {
moflows <- aggregate(flows, function(tt) as.Date(as.yearmon(tt)), mean);
ndx = which.min(moflows);
dor_flow = round(moflows[ndx],2);
dor_date = index(moflows[ndx]);
} else {
dor_flow = 'na';
dor_date = as.Date('1776-07-04');
}
d <- try( as.Date( dor_date, format= "%d-%m-%Y %H:%M:%S" ) )
if( class( d ) == "try-error" || is.na( d ) ) dor_date = as.Date('1776-07-04');
newline = data.frame(
"Run ID" = runid,
"Segment Name" = paste(
as.character(odata[i,]$name ),
" (", as.character(drainage), ")", sep=""),
"7Q10/ALF/Min Month" = paste(
as.character(x7q10),
as.character(alf),
paste(
as.character(dor_flow),
" (",
as.character(format(dor_date,'%Y-%m')),
")",
sep=''
),
sep="/"
),
"WD (mean/max)" = paste(as.character(mean_wd),as.character(max_wd),sep="/")
);
wshed_summary_tbl <- rbind(wshed_summary_tbl, newline);
barplot(aggregate(wds, format(time(wds), "%m"), mean));
}
colnames(wshed_summary_tbl) <- c(
"Run ID",
"Segment Name (D. Area)",
"7Q10/ALF/Min Month",
"WD (mean/max)"
);
pander(wshed_summary_tbl, table.split.table=Inf);
wshed_summary_tbl = data.frame(
"Run ID" = character(),
"Segment Name (D. Area)" = character(),
"7Q10/ALF/Min Month" = character(),
"WD (mean/max)" = character(),
stringsAsFactors = FALSE) ;
for (rix in 1:length(runids)) {
runid = runids[rix];
# Pamunkey below fall line = 223639
# Rockfish 213049
# Rivanna at Confluence with james = 214993
# Segment name | Drainage Area | 7Q10 | ALF | DoR Sept (min mo?) | 9-10
# Initialize Summary Table
inputs <- list(
varkey = "om_element_connection",
featureid = odata[1,"hydroid"],
entity_type = "dh_feature"
)
prop <- getProperty(inputs, base_url, prop)
elid = as.numeric(as.character(prop[1,]$propvalue))
flows <- fn_get_rundata(elid, runid);
if (flows) {
x7q10 = round(fn_iha_7q10(flows),2);
alf = round(fn_iha_mlf(flows, 8),2);
} else {
x7q10 = 'na';
alf = 'na';
}
wds <- fn_get_rundata(elid, runid, "wd_cumulative_mgd");
if (is.numeric(wds)) {
mean_wd = round(mean(wds),2);
max_wd = round(max(wds),2);
} else {
mean_wd = 'na';
max_wd = 'na';
}
# aggregate: https://stackoverflow.com/questions/5556135/how-to-get-the-date-of-maximum-values-of-rainfall-in-programming-language-r
if (flows) {
moflows <- aggregate(flows, function(tt) as.Date(as.yearmon(tt)), mean);
ndx = which.min(moflows);
dor_flow = round(moflows[ndx],2);
dor_date = index(moflows[ndx]);
} else {
dor_flow = 'na';
dor_date = as.Date('1776-07-04');
}
d <- try( as.Date( dor_date, format= "%d-%m-%Y %H:%M:%S" ) )
if( class( d ) == "try-error" || is.na( d ) ) dor_date = as.Date('1776-07-04');
newline = data.frame(
"Run ID" = runid,
"Segment Name" = paste(
as.character(odata[i,]$name ),
" (", as.character(drainage), ")", sep=""),
"7Q10/ALF/Min Month" = paste(
as.character(x7q10),
as.character(alf),
paste(
as.character(dor_flow),
" (",
as.character(format(dor_date,'%Y-%m')),
")",
sep=''
),
sep="/"
),
"WD (mean/max)" = paste(as.character(mean_wd),as.character(max_wd),sep="/")
);
wshed_summary_tbl <- rbind(wshed_summary_tbl, newline);
barplot(aggregate(wds, format(time(wds), "%m"), mean));
}
colnames(wshed_summary_tbl) <- c(
"Run ID",
"Segment Name (D. Area)",
"7Q10/ALF/Min Month",
"WD (mean/max)"
);
# Monthly distro plot
# Lowest Flow Month
pander(wshed_summary_tbl, table.split.table=Inf);
library(pander);
R.version()
R.version
updateR()
install.packages(installr)
install.packages('installr')
library('installr')
updateR()
R.version
install.packages(c("assertthat", "backports", "BH", "broom", "checkmate", "chron", "coin", "curl", "data.table", "DBI", "devtools", "dplyr", "effects", "formatR", "Formula", "ggpmisc", "ggrepel", "glue", "gridExtra", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lazyeval", "lme4", "lubridate", "markdown", "multcomp", "openssl", "PearsonDS", "PKI", "psych", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "reshape", "rlang", "rmarkdown", "RPostgreSQL", "rsconnect", "rstudioapi", "sandwich", "scales", "shiny", "sjmisc", "sjPlot", "sjstats", "spacetime", "SparseM", "stringdist", "stringi", "tibble", "tidyr", "waterData", "withr", "yaml"))
install.packages(c("assertthat", "backports", "BH", "broom", "checkmate", "chron", "coin", "curl", "data.table", "DBI", "devtools", "dplyr", "effects", "formatR", "Formula", "ggpmisc", "ggrepel", "glue", "gridExtra", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lazyeval", "lme4", "lubridate", "markdown", "multcomp", "openssl", "PearsonDS", "PKI", "psych", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "reshape", "rlang", "rmarkdown", "RPostgreSQL", "rsconnect", "rstudioapi", "sandwich", "scales", "shiny", "sjmisc", "sjPlot", "sjstats", "spacetime", "SparseM", "stringdist", "stringi", "tibble", "tidyr", "waterData", "withr", "yaml"))
install.packages(c("assertthat", "backports", "BH", "broom", "checkmate", "chron", "coin", "curl", "data.table", "DBI", "devtools", "dplyr", "effects", "formatR", "Formula", "ggpmisc", "ggrepel", "glue", "gridExtra", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lazyeval", "lme4", "lubridate", "markdown", "multcomp", "openssl", "PearsonDS", "PKI", "psych", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "reshape", "rlang", "rmarkdown", "RPostgreSQL", "rsconnect", "rstudioapi", "sandwich", "scales", "shiny", "sjmisc", "sjPlot", "sjstats", "spacetime", "SparseM", "stringdist", "stringi", "tibble", "tidyr", "waterData", "withr", "yaml"))
install.packages(c("assertthat", "backports", "BH", "broom", "checkmate", "chron", "coin", "curl", "data.table", "DBI", "devtools", "dplyr", "effects", "formatR", "Formula", "ggpmisc", "ggrepel", "glue", "gridExtra", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lazyeval", "lme4", "lubridate", "markdown", "multcomp", "openssl", "PearsonDS", "PKI", "psych", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "reshape", "rlang", "rmarkdown", "RPostgreSQL", "rsconnect", "rstudioapi", "sandwich", "scales", "shiny", "sjmisc", "sjPlot", "sjstats", "spacetime", "SparseM", "stringdist", "stringi", "tibble", "tidyr", "waterData", "withr", "yaml"))
install.packages(c("assertthat", "backports", "BH", "broom", "checkmate", "chron", "coin", "curl", "data.table", "DBI", "devtools", "dplyr", "effects", "formatR", "Formula", "ggpmisc", "ggrepel", "glue", "gridExtra", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lazyeval", "lme4", "lubridate", "markdown", "multcomp", "openssl", "PearsonDS", "PKI", "psych", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "reshape", "rlang", "rmarkdown", "RPostgreSQL", "rsconnect", "rstudioapi", "sandwich", "scales", "shiny", "sjmisc", "sjPlot", "sjstats", "spacetime", "SparseM", "stringdist", "stringi", "tibble", "tidyr", "waterData", "withr", "yaml"))
install.packages(c("assertthat", "backports", "BH", "broom", "checkmate", "chron", "coin", "curl", "data.table", "DBI", "devtools", "dplyr", "effects", "formatR", "Formula", "ggpmisc", "ggrepel", "glue", "gridExtra", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lazyeval", "lme4", "lubridate", "markdown", "multcomp", "openssl", "PearsonDS", "PKI", "psych", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "reshape", "rlang", "rmarkdown", "RPostgreSQL", "rsconnect", "rstudioapi", "sandwich", "scales", "shiny", "sjmisc", "sjPlot", "sjstats", "spacetime", "SparseM", "stringdist", "stringi", "tibble", "tidyr", "waterData", "withr", "yaml"))
library(pander);
library(httr);
save_directory <- "/var/www/html/files/fe/plots"
#----------------------------------------------
site <- "http://deq1.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#----------------------------------------------
# Load Libraries
fxn_locations = '/usr/local/home/git/r-dh-ecohydro/Analysis';
source(paste(fxn_locations,"fn_vahydro-1.0.R", sep = "/"));
source(paste(fxn_locations,"fn_vahydro-2.0", "rest_functions.R", sep = "/"));
source(paste(fxn_locations,"fn_iha.R", sep = "/"));
#retrieve rest token - DISABLED
#fxn_locations <-  '/usr/local/home/git/r-dh-ecohydro/ELFGEN';
#source(paste(fxn_locations,"elf_rest_token.R", sep = "/"));
#elf_rest_token (site, token)
#token <- elf_rest_token(site, token)
options(timeout=120); # set timeout to twice default level to avoid abort due to high traffic
# @todo: get list of watersheds or watershed info by REST
# THIS DOES NOT WORK - See below using a View that can retrieve only vahydro segments
#featureid <- 68178;
#featrest  <- GET(
#  paste(site,"dh_feature.json",sep="/"),
#  add_headers(HTTP_X_CSRF_TOKEN = token),
#  query = list(
#    hydroid = featureid
#  ),
#  encode = "json"
#);
#print(paste("Property Query:",sp,""));
# Use Views to get our info
# Pamunkey HUC8
#hydrocode = "nhd_huc8_02080106";
# Uper Rockfish HUC 10 hydrocode = 0208020309
# Rockfish HUC 8 hydrocode = nhd_huc8_02080203
# Middle-James/Willis (above Richmond) HUC 8 hydrocode = nhd_huc8_02080205
# Rivanna HUC 8 hydrocode = nhd_huc8_02080204
# Middle-James/Buffalo HUC 8 hydrocode = nhd_huc8_02080203
# North Anna Dam: vahydrosw_wshed_YP2_6390_6330
# Doswell: vahydrosw_wshed_YP3_6700_6670
# South Anna: vahydrosw_wshed_YP3_6690_6720
hydrocode = "vahydrosw_wshed_YP3_6690_6720";
# to run in knit'r, need to preload token
token = 'Oxc9BpSkdHPOCWQb19Fr055mEF9sQNdFi4l2CPxTSGA';
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode,
bundle = 'watershed',
ftype = 'vahydro'
)
#property dataframe returned
feature = FALSE;
odata <- getFeature(inputs, token, site, feature);
# Ex: flows <- fn_get_rundata(207885, 402);
#     fn_iha_7q10(flows);
runids = c(2,4);
wshed_summary_tbl = data.frame(
"Run ID" = character(),
"Segment Name (D. Area)" = character(),
"7Q10/ALF/Min Month" = character(),
"WD (mean/max)" = character(),
stringsAsFactors = FALSE) ;
#pander(odata);
for (rix in 1:length(runids)) {
runid = runids[rix];
# Pamunkey below fall line = 223639
# Rockfish 213049
# Rivanna at Confluence with james = 214993
# Segment name | Drainage Area | 7Q10 | ALF | DoR Sept (min mo?) | 9-10
# Initialize Summary Table
inputs <- list(
varkey = "om_element_connection",
featureid = odata[1,"hydroid"],
entity_type = "dh_feature"
)
prop <- getProperty(inputs, base_url, prop)
elid = as.numeric(as.character(prop[1,]$propvalue))
dat <- fn_get_runfile(elid, runid);
plot(dat$Qout,ylim=c(0,10000))
fdc(dat$Qout, main="Flow Duration", log='', xlab="Flow Exceedence",
ylab="Q cfs", verbose=FALSE);
as.numeric(as.character( dat$Qout ))
# For some reason we need to convert these numeric fields to char, then to number
# before sending to zoo since their retrieval is classifying them as factors instead of nums
# now there may be away to get around that but...
flows <- zoo(as.numeric(as.character( dat$Qout )), order.by = dat$thisdate);
#flows <- fn_get_rundata(elid, runid);
if (flows) {
x7q10 = round(fn_iha_7q10(flows),2);
alf = round(fn_iha_mlf(flows, 8),2);
} else {
x7q10 = 'na';
alf = 'na';
}
wds <- zoo(as.numeric(as.character( dat$wd_cumulative_mgd )), order.by = dat$thisdate);
#wds <- fn_get_rundata(elid, runid, "wd_cumulative_mgd");
if (is.numeric(wds)) {
mean_wd = round(mean(wds),2);
max_wd = round(max(wds),2);
} else {
mean_wd = 'na';
max_wd = 'na';
}
# aggregate: https://stackoverflow.com/questions/5556135/how-to-get-the-date-of-maximum-values-of-rainfall-in-programming-language-r
if (flows) {
# this is the 90 day low flow, better for Drought of Record?
loflows <- group2(flows);
l90 <- loflows["90 Day Min"];
ndx = which.min(as.numeric(l90[,"90 Day Min"]));
dor_flow = round(loflows[ndx,]$"90 Day Min",1);
dor_year = loflows[ndx,]$"year";
#moflows <- aggregate(flows, function(tt) as.Date(as.yearmon(tt), na.rm = TRUE), mean);
#ndx = which.min(moflows);
#x2a <- aggregate(flows, as.Date(as.yearmon(flows), na.rm = TRUE), mean);
#dor_flow = round(moflows[ndx],2);
#dor_year = index(moflows[ndx]);
} else {
dor_flow = 'na';
dor_year = 1776;
}
newline = data.frame(
"Run ID" = runid,
"Segment Name" = paste(
as.character(odata[i,]$name ),
" (", as.character(drainage), ")", sep=""),
"7Q10/ALF/Min Month" = paste(
as.character(x7q10),
as.character(alf),
paste(
as.character(dor_flow),
" (",
dor_year,
")",
sep=''
),
sep="/"
),
"WD (mean/max)" = paste(as.character(mean_wd),as.character(max_wd),sep="/")
);
wshed_summary_tbl <- rbind(wshed_summary_tbl, newline);
dat$wd_cumulative_mgd <- as.numeric(dat$wd_cumulative_mgd);
dat$month <- as.numeric(dat$month);
mo_wds <- group1(wds,'calendar','mean');
barplot(mo_wds[1,]);
}
library(pander);
library(httr);
save_directory <- "/var/www/html/files/fe/plots"
#----------------------------------------------
site <- "http://deq1.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#----------------------------------------------
# Load Libraries
fxn_locations = '/usr/local/home/git/r-dh-ecohydro/Analysis';
source(paste(fxn_locations,"fn_vahydro-1.0.R", sep = "/"));
source(paste(fxn_locations,"fn_vahydro-2.0", "rest_functions.R", sep = "/"));
source(paste(fxn_locations,"fn_iha.R", sep = "/"));
#retrieve rest token - DISABLED
#fxn_locations <-  '/usr/local/home/git/r-dh-ecohydro/ELFGEN';
#source(paste(fxn_locations,"elf_rest_token.R", sep = "/"));
#elf_rest_token (site, token)
# to run in knit'r, need to preload token
#token = 'Oxc9BpSkdHPOCWQb19Fr055mEF9sQNdFi4l2CPxTSGA';
token <- elf_rest_token(site, token);
library(pander);
library(httr);
save_directory <- "/var/www/html/files/fe/plots"
#----------------------------------------------
site <- "http://deq1.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#----------------------------------------------
# Load Libraries
fxn_locations = '/usr/local/home/git/r-dh-ecohydro/Analysis';
source(paste(fxn_locations,"fn_vahydro-1.0.R", sep = "/"));
source(paste(fxn_locations,"fn_vahydro-2.0", "rest_functions.R", sep = "/"));
source(paste(fxn_locations,"fn_iha.R", sep = "/"));
#retrieve rest token - DISABLED
#fxn_locations <-  '/usr/local/home/git/r-dh-ecohydro/ELFGEN';
#source(paste(fxn_locations,"elf_rest_token.R", sep = "/"));
#elf_rest_token (site, token)
# to run in knit'r, need to preload token
#token = 'Oxc9BpSkdHPOCWQb19Fr055mEF9sQNdFi4l2CPxTSGA';
token <- rest_token(site, token);
library(pander);
site <- "http://deq1.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#----------------------------------------------
# Load Libraries
fxn_locations = '/usr/local/home/git/r-dh-ecohydro/Analysis';
#----------------------------------------------
# Load Libraries
fxn_locations = '/usr/local/home/git/r-dh-ecohydro/Analysis';
source(paste(fxn_locations,"fn_vahydro-1.0.R", sep = "/"));
source(paste(fxn_locations,"fn_vahydro-2.0", "rest_functions.R", sep = "/"));
source(paste(fxn_locations,"fn_vahydro-2.0", "rest_functions.R", sep = "/"));
source(paste(fxn_locations,"fn_iha.R", sep = "/"));
#retrieve rest token - DISABLED
#source(paste(fxn_locations,"elf_rest_token.R", sep = "/"));
#elf_rest_token (site, token)
# to run in knit'r, need to preload token
#token = 'Oxc9BpSkdHPOCWQb19Fr055mEF9sQNdFi4l2CPxTSGA';
token <- rest_token(site, token);
library(pander);
library(httr);
save_directory <- "/var/www/html/files/fe/plots"
#----------------------------------------------
site <- "http://deq1.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#----------------------------------------------
# Load Libraries
fxn_locations = '/usr/local/home/git/r-dh-ecohydro/Analysis';
source(paste(fxn_locations,"fn_vahydro-1.0.R", sep = "/"));
source(paste(fxn_locations,"fn_vahydro-2.0", "rest_functions.R", sep = "/"));
source(paste(fxn_locations,"fn_iha.R", sep = "/"));
token <- rest_token(site, token);
