#!/bin/bash
. om_config

if [ $# -lt 5 ]; then
  echo 1>&2 "Usage: om_copy_property src_entity_type src_featureid dest_entity_type dest_featureid propname[propname|newname] [include_children=1] [overwrite=0] [debug=0]"
  exit 2
fi 

src_entity_type=$1
src_featureid=$2
dest_entity_type=$3
dest_featureid=$4
IFS="|" read propname dest_name <<< "$5"
if [ "$dest_name" == "" ]; then
  dest_name=$propname
fi 
include_children=1
if [ $# -gt 5 ]; then
  include_children=$6
fi 
overwrite=0
if [ $# -gt 6 ]; then
  overwrite=$7
fi 
debug=0
if [ $# -gt 7 ]; then
  debug=$8
fi 
echo 1>&2 "Check overwrite code overwrite = $overwrite "
if [ "$overwrite" == "1" ]; then 
  # check custom setting (protected props will have a custom=1 sub-prop)
  exist=`om_get_prop $dest_entity_type $dest_featureid $dest_name pid`
  if [ "$exist" != "" ]; then 
    custom=`om_get_prop dh_properties $exist custom propvalue`
    echo 1>&2 "custom = $custom"
    if [ "$custom" != "1" ]; then
      # OK to delete 
      echo 1>&2 "I would delete cause custom <> 1 but wont cause this is a test"
#      om_delete_property $dest_entity_type $dest_featureid "$dest_name" $debug
    else 
      echo 1>&2 "Property $dest_name exists on $dest_featureid and overwrite <> 2 (force) cancelling."
      exit
    fi
  fi
fi
exit
if [ "$overwrite" == "2" ]; then 
  # overwrite regardless of custom setting
  om_delete_property $dest_entity_type $dest_featureid "$dest_name" $debug
fi

fprop=`echo "${propname// /}"`
prop_copy_sql_file="/tmp/odcopy_${featureid}_${fprop}.sql"

prop_copy_sql="
BEGIN; \n

\\set src_featureid $src_featureid \n
\\set src_entity_type '$src_entity_type' \n
\\set propname '$propname' \n
\\set dest_featureid $dest_featureid \n
\\set dest_entity_type '$dest_entity_type' \n
\\set dest_name '$dest_name' \n
\\set include_children $include_children \n

select pid as root_pid from dh_properties where featureid = :src_featureid and entity_type = :'src_entity_type' and propname = :'propname' \gset \n\n


select count(pid) as exist_pid from dh_properties where featureid = :dest_featureid and entity_type = :'dest_entity_type' and propname = :'dest_name' \gset \n\n


create temp table tmp_clone_prop as select * from dh_properties_fielded limit 0;\n

WITH RECURSIVE prop_tree AS ( \n
      SELECT p.* \n
      FROM dh_properties_fielded as p  \n
      WHERE p.pid = :root_pid \n
        AND :exist_pid = 0 \n
      UNION \n
      SELECT c.* \n
      FROM dh_properties_fielded as c  \n
      inner join prop_tree as p \n
      on (c.featureid = p.pid and c.entity_type = 'dh_properties' and :include_children = 1) \n
      WHERE :exist_pid = 0 \n
    ) \n
INSERT INTO tmp_clone_prop SELECT * from prop_tree; \n

create temp table map_clone_pids (pid BIGINT, clone_pid BIGINT); \n

with rows as ( \n
  INSERT INTO dh_properties(featureid, entity_type, bundle, module, status, \n
    propname, propcode, propvalue, varid,  \n
    modified,startdate, enddate, clone_pid, vid, uid \n
  ) \n
  SELECT featureid, entity_type, bundle, module, status,  \n
    propname, propcode, propvalue, varid,  \n
    modified,startdate, enddate, pid, vid, uid \n
  FROM tmp_clone_prop RETURNING pid, clone_pid \n
) \n
INSERT INTO map_clone_pids (pid, clone_pid) \n
SELECT pid, clone_pid \n
FROM rows ; \n

-- Now, connect to the newly created parent, the new parent will be the  \n\n
update dh_properties set featureid = map_clone_pids.pid from map_clone_pids \n
where dh_properties.featureid = map_clone_pids.clone_pid \n
and dh_properties.entity_type = 'dh_properties'  \n
and dh_properties.pid in (select pid from map_clone_pids); \n

update dh_properties set featureid = :dest_featureid, propname = :'dest_name' \n
where pid in (select pid from map_clone_pids where clone_pid = :root_pid);\n

insert into dh_properties_revision(featureid, entity_type, bundle, module, status,  \n
    propname, propcode, propvalue, varid,  \n
    modified,startdate, enddate, pid, uid \n
  )  \n
select featureid, entity_type, bundle, module, status,  \n
    propname, propcode, propvalue, varid,  \n
    modified,startdate, enddate, pid, uid  \n
from dh_properties where pid in (select pid from map_clone_pids); \n

update dh_properties set vid = a.vid 
from (
  select a.pid, b.vid 
  from map_clone_pids as a
  left outer join dh_properties_revision as b
  on (a.pid = b.pid)
  where b.vid is not null
) as a
where dh_properties.pid = a.pid
;  \n

-- Copy proptext \n

insert into field_data_proptext(entity_type , bundle, deleted, entity_id, revision_id, language, delta, proptext_value, proptext_format) 
select a.entity_type , a.bundle, a.deleted, b.pid, b.vid, a.language, a.delta, a.proptext_value, a.proptext_format
from dh_properties as b, field_data_proptext as a, map_clone_pids as c 
WHERE a.entity_id in (select clone_pid from map_clone_pids)
  and a.entity_id = b.clone_pid
  and a.entity_type = 'dh_properties' 
  and b.pid = c.pid 
  and b.pid not in (
     select entity_id from field_data_proptext
     where entity_id in (select pid from map_clone_pids) 
     and entity_type = 'dh_properties'
  ) 
; \n 

-- Copy normal matrices \n

insert into field_data_field_dh_matrix (entity_type , bundle, deleted, entity_id, revision_id, language, delta, field_dh_matrix_value, field_dh_matrix_format, field_dh_matrix_json) 
select a.entity_type , a.bundle, a.deleted, b.pid, b.vid, a.language, a.delta, a.field_dh_matrix_value, a.field_dh_matrix_format, a.field_dh_matrix_json
from map_clone_pids as c, dh_properties as b, field_data_field_dh_matrix as a
WHERE a.entity_id in (select clone_pid from map_clone_pids)
  and a.entity_id = b.clone_pid
  and a.entity_type = 'dh_properties' 
  and b.pid = c.pid 
  and b.pid not in (
     select entity_id from field_data_field_dh_matrix 
     where entity_id in (select pid from map_clone_pids) 
     and entity_type = 'dh_properties'
  ) 
; \n
-- Copy WSP projection matrices \n
-- This is NA for model nested properties, but for a single WSP property it is relevant \n


insert into field_data_field_projection_table (entity_type , bundle, deleted, entity_id, revision_id, language, delta, field_projection_table_value, field_projection_table_format)
select a.entity_type , a.bundle, a.deleted, b.pid, b.vid, a.language, a.delta, a.field_projection_table_value, a.field_projection_table_format
from map_clone_pids as c, dh_properties as b, field_data_field_projection_table as a
WHERE a.entity_id in (select clone_pid from map_clone_pids)
  and a.entity_id = b.clone_pid
  and a.entity_type = 'dh_properties' 
  and b.pid = c.pid 
  and b.pid not in (
     select entity_id from field_data_field_projection_table 
     where entity_id in (select pid from map_clone_pids) 
     and entity_type = 'dh_properties'
  ) 
;\n

COMMIT; \n 
"

set -f
echo -e $prop_copy_sql > $prop_copy_sql_file
cat $prop_copy_sql_file | psql -h $DB_HOST $DB_NAME
if [ "$debug" != "1" ]; then
  rm $prop_copy_sql_file
fi
